//
// AACCardNode.h
// ActionCardsSDK
// Copyright Â© 2019 Atomic.io Limited. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <AtomicSDK/AACValidator.h>

// Type-safe way of returning the name of a property as a string.
#define AAC_PROPERTY_NAME(name) NSStringFromSelector(@selector(name))

/**
 Base class for all card nodes. Each layout has a collection or 1 or more nodes
 that are rendered by the SDK to the user.
 */
@interface AACCardNode: NSObject

@property (nonatomic, copy, nonnull, readonly) NSString *type;

@property (nonatomic, copy, nonnull) NSString *cardInstanceId;

/**
 The immediate children of this node.
 */
@property (nonatomic, strong, readonly, nullable) NSArray<AACCardNode*>* children;

/**
 A flattened array of children for this node.
 Used for component rendering, to avoid nesting components.
 Note: buttons are still nested for rendering performances.
 
 e.g. a structure like this:
 - headline
    |- form
       |- submitButton
 
 becomes:
 - headline
 - form
    |- submitButton
 */
@property (nonatomic, strong, nullable, readonly) NSArray<AACCardNode*>* flattenedChildren;

/**
 A validator object that can be used to validate the input in this node,
 or `nil` if the node does not have any validations.
 */
@property (nonatomic, strong, nullable, readonly) AACValidator *validator;

/**
 An array of buttons held by the node, if any. Buttons are now all hosted in the `AACCardNodeForm` node.
 */
@property (nonatomic, strong, nullable, readonly) NSMutableArray* buttons;

/**
 Whether this node represents a form field that contains buttons.
 */
@property (nonatomic, readonly) BOOL isForm;

/**
 Whether this node represents a placeholder that should not be calculated in height.
 */
@property (nonatomic, readonly) BOOL isPlaceholder;

/**
 Whether this node represents a placeholder that should not be calculated in height.
 */
@property (nonatomic, readonly) BOOL isList;

/**
 Returns the name of all properties on the node that accept runtime variables.
 This is used to identify which properties should be parsed for runtime variables when committed.
 Defaults to an empty array.
 */
- (NSArray<NSString*>* __nonnull)propertiesWithRuntimeVariables;

/**
 Applies the given variable mapping to the card node.
 Keys in the dictionary represent variable names, and the values represent their resolved values.
 */
- (void)commitVariablesWithMapping:(NSDictionary<NSString*, NSString*>* __nonnull)mapping;

@end

/**
 Base class for nodes that submit a value in a card response.
 
 The `name` property indicates which name should be used to identify this node's value
 in the response payload.
 */
@interface AACCardNodeSubmittable: AACCardNode

/// The identifying name of this node, used when submitting a value for it.
@property (nonatomic, copy, nonnull) NSString* name;

/// The stored response value, a handy accessor to the stored default value.
@property (nonatomic, readonly, nullable) id storedResponseValue;

/// Whether the node needs validation, this value defaults to `NO`, which means
/// no validation is needed at first.
@property (nonatomic) BOOL needValidation;

/**
 Store the user input value into this node so it can be recovered when displaying.
 The new value replaces its default value so it inherits the original value rendering process.
 
 @param value The value generated by related component view. Could be multiple kind.
 */
- (void)storeValue:(id __nullable)value;

@end

#pragma mark - Node definitions

/**
 A heading node, which represents a top-level title.
 Has only a `text` property.
 */
@interface AACCardNodeHeading1: AACCardNode

@property (nonatomic, copy, nonnull) NSString* text;

@end

/**
 The button types of both top and subview level buttons.
 */
typedef NS_ENUM(NSInteger, AACCardButtonType) {
    AACCardButtonTypePrimary,
    AACCardButtonTypeSecondary,
};

/**
 A base class for all button nodes.
 */
@interface AACCardBaseButton: AACCardNode

/// Text to display on the button.
@property (nonatomic, copy, nonnull) NSString* text;

/// If non-empty, matched against the known icon names from the Font Awesome Pro 5 font.
@property (nonatomic, copy, nullable) NSString* icon;

@property (nonatomic) AACCardButtonType buttonType;

@end

/**
 A base class for button nodes that hold a url and a payload, such as link or submit buttons.
 */
@interface AACCardNodeButton: AACCardBaseButton

/// The URL to navigate to when tapping on this node.
/// It's now generated from `urlString`.
@property (nonatomic, copy, nullable, readonly) NSURL* url;

/// The URL string to navigate to when tapping on this node.
@property (nonatomic, copy, nullable) NSString* urlString;

/**
 A payload of key-value pairs that are sent to the host app, to determine the custom action taken
 when tapping on this button.
 For link buttons, this payload is sent upon tapping on the button.
 For submit buttons, this payload is sent after successful submission.
 */
@property (nonatomic, copy, nullable) NSDictionary *actionPayload;

@end

/**
 A button used to submit a form.
 */
@interface AACCardNodeSubmitButton: AACCardNodeButton

/// Values to submit along with the data already collected for this form.
@property (nonatomic, strong, nullable) NSDictionary* values;

@end

/**
 A node that renders a category title (e.g. 'Leave Request').
 */
@interface AACCardNodeCategory: AACCardNode

/// The title to display.
@property (nonatomic, copy, nonnull) NSString* text;

@end

/**
 A form node is a wrapper node for a collection of form fields.
 */
@interface AACCardNodeForm: AACCardNode

/**
 Identifier for the response definition this form
 submission corresponds to.
 */
@property (nonatomic, copy, nonnull) NSString* responseDefinition;

/**
 Default values to send when submitting the form.
 Individual form fields may override these default values.
 */
@property (nonatomic, strong, nullable) NSDictionary* defaultValues;

@end
