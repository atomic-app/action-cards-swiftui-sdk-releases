// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AtomicSwiftUISDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVKit
import AtomicSDK
@_exported import AtomicSwiftUISDK
import Combine
import Foundation
import Network
import OSLog
import PhotosUI
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import _AVKit_SwiftUI
import _Concurrency
import _PhotosUI_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
extension AVKit.AVPlayerViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
}
@available(iOS 16.0, *)
public struct Card {
  public let instanceId: Swift.String
  public let runtimeVariables: [AtomicSwiftUISDK.RuntimeVariable]
  public mutating func resolveRuntimeVariable(name: Swift.String, value: Swift.String)
}
@available(iOS 16.0, *)
@_Concurrency.MainActor @preconcurrency public struct HorizontalContainer : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(containerId: Swift.String, cardWidth: CoreFoundation.CGFloat, configuration: AtomicSwiftUISDK.ContainerConfiguration = .init())
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s16AtomicSwiftUISDK19HorizontalContainerV4bodyQrvp", 0) __
}
@available(iOS 16.0, *)
@_Concurrency.MainActor @preconcurrency public struct LazySingleCardContainer : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(containerId: Swift.String, configuration: AtomicSwiftUISDK.ContainerConfiguration = .init())
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s16AtomicSwiftUISDK23LazySingleCardContainerV4bodyQrvp", 0) __
}
@available(iOS 16.0, *)
public struct RuntimeVariable {
  public let name: Swift.String
  public let defaultValue: Swift.String
}
@available(iOS 16.0, *)
@_Concurrency.MainActor @preconcurrency public struct StreamContainer : SwiftUICore.View {
  @available(*, deprecated, renamed: "init(containerId:configuration:)")
  @_Concurrency.MainActor @preconcurrency public init(isInNavigationStack: Swift.Bool, containerId: Swift.String, configuration: AtomicSwiftUISDK.ContainerConfiguration = .init())
  @_Concurrency.MainActor @preconcurrency public init(containerId: Swift.String, configuration: AtomicSwiftUISDK.ContainerConfiguration = .init())
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s16AtomicSwiftUISDK15StreamContainerV4bodyQrvp", 0) __
}
@available(iOS 16.0, *)
public struct ContainerConfiguration {
  public enum Event {
    case actionButtonTapped
    case linkButtonTapped(cardInstanceId: Swift.String, payload: [Swift.AnyHashable : Any])
    case imageTapped(cardInstanceId: Swift.String, payload: [Swift.AnyHashable : Any])
    case submitButtonTappedWithName(cardInstanceId: Swift.String, buttonName: Swift.String, payload: [Swift.AnyHashable : Any])
    case cardSubmittedWithName(cardInstanceId: Swift.String, buttonName: Swift.String)
    case cardDismissed(cardInstanceId: Swift.String)
    case cardSnoozed(cardInstanceId: Swift.String)
    case cardVotedUseful(cardInstanceId: Swift.String)
    case cardVotedNotUseful(cardInstanceId: Swift.String)
    case cardSubmitFailed(cardInstanceId: Swift.String)
    case cardDismissFailed(cardInstanceId: Swift.String)
    case cardSnoozeFailed(cardInstanceId: Swift.String)
    case cameraDenied(cardInstanceId: Swift.String)
    case cameraRestricted(cardInstanceId: Swift.String)
  }
  public typealias EventHandler = (_ event: AtomicSwiftUISDK.ContainerConfiguration.Event) -> Swift.Void
  public typealias RuntimeVariablesHandler = (_ cardsToResolve: [AtomicSwiftUISDK.Card]) async -> [AtomicSwiftUISDK.Card]
  public enum CustomString {
    case cardListTitle
    case snoozeTitle
    case awaitingFirstCard
    case allCardsCompleted
    case votingUseful
    case votingNotUseful
    case votingFeedbackTitle
    case cardListFooterMessage
    case noInternetConnectionMessage
    case dataLoadFailedMessage
    case tryAgainTitle
    case toastCardDismissedMessage
    case toastCardCompletedMessage
    case toastCardSnoozeMessage
    case toastCardFeedbackMessage
    case thumbnailImageActionLinkTitle
    case thumbnailVideoActionLinkTitle
    case processingStateMessage
    case processingStateCancelButtonTitle
    case toastFileUploadFailedMessage
    case requestCameraAccessMessage
    case requestCameraAccessSettingsTitle
    case votingFeedbackValidationMessage
    public static func == (a: AtomicSwiftUISDK.ContainerConfiguration.CustomString, b: AtomicSwiftUISDK.ContainerConfiguration.CustomString) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(*, deprecated, message: "Use the card voting menu configuration in Atomic Workbench instead.")
  public struct VotingOption : Swift.OptionSet {
    public let rawValue: Swift.Int
    public static let none: AtomicSwiftUISDK.ContainerConfiguration.VotingOption
    public static let useful: AtomicSwiftUISDK.ContainerConfiguration.VotingOption
    public static let notUseful: AtomicSwiftUISDK.ContainerConfiguration.VotingOption
    public init(rawValue: Swift.Int)
    @available(*, deprecated, message: "Use the card voting menu configuration in Atomic Workbench instead.")
    @available(iOS, introduced: 16.0, message: "Use the card voting menu configuration in Atomic Workbench instead.")
    public typealias ArrayLiteralElement = AtomicSwiftUISDK.ContainerConfiguration.VotingOption
    @available(*, deprecated, message: "Use the card voting menu configuration in Atomic Workbench instead.")
    @available(iOS, introduced: 16.0, message: "Use the card voting menu configuration in Atomic Workbench instead.")
    public typealias Element = AtomicSwiftUISDK.ContainerConfiguration.VotingOption
    @available(*, deprecated, message: "Use the card voting menu configuration in Atomic Workbench instead.")
    @available(iOS, introduced: 16.0, message: "Use the card voting menu configuration in Atomic Workbench instead.")
    public typealias RawValue = Swift.Int
  }
  public enum InterfaceStyle {
    case automatic
    case light
    case dark
    public static func == (a: AtomicSwiftUISDK.ContainerConfiguration.InterfaceStyle, b: AtomicSwiftUISDK.ContainerConfiguration.InterfaceStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct UIElement : Swift.OptionSet {
    public let rawValue: Swift.Int
    public static let none: AtomicSwiftUISDK.ContainerConfiguration.UIElement
    public static let cardListToast: AtomicSwiftUISDK.ContainerConfiguration.UIElement
    public static let cardListFooterMessage: AtomicSwiftUISDK.ContainerConfiguration.UIElement
    public static let cardListHeader: AtomicSwiftUISDK.ContainerConfiguration.UIElement
    public static let requestCameraUsage: AtomicSwiftUISDK.ContainerConfiguration.UIElement
    public init(rawValue: Swift.Int)
    @available(iOS 16.0, *)
    public typealias ArrayLiteralElement = AtomicSwiftUISDK.ContainerConfiguration.UIElement
    @available(iOS 16.0, *)
    public typealias Element = AtomicSwiftUISDK.ContainerConfiguration.UIElement
    @available(iOS 16.0, *)
    public typealias RawValue = Swift.Int
  }
  public init()
  public init(onEvent: AtomicSwiftUISDK.ContainerConfiguration.EventHandler?, onRuntimeVariablesRequested: AtomicSwiftUISDK.ContainerConfiguration.RuntimeVariablesHandler?)
  public enum PresentationStyle {
    case withoutButton
    case withActionButton
    public static func == (a: AtomicSwiftUISDK.ContainerConfiguration.PresentationStyle, b: AtomicSwiftUISDK.ContainerConfiguration.PresentationStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var presentationStyle: AtomicSwiftUISDK.ContainerConfiguration.PresentationStyle
  public var onEvent: AtomicSwiftUISDK.ContainerConfiguration.EventHandler?
  public var onRuntimeVariablesRequested: AtomicSwiftUISDK.ContainerConfiguration.RuntimeVariablesHandler?
  public var launchBackgroundColor: SwiftUICore.Color
  public var launchLoadingIndicatorColor: SwiftUICore.Color
  public var launchButtonColor: SwiftUICore.Color
  public var launchTextColor: SwiftUICore.Color
  public var cardListRefreshInterval: Swift.Double {
    get
    set
  }
  public var enabledUIElements: AtomicSwiftUISDK.ContainerConfiguration.UIElement
  public var runtimeVariableResolutionTimeout: Swift.Double {
    get
    set
  }
  public var interfaceStyle: AtomicSwiftUISDK.ContainerConfiguration.InterfaceStyle
  @available(*, deprecated, message: "Use the card voting menu configuration in Atomic Workbench instead.")
  public var cardVotingOptions: AtomicSwiftUISDK.ContainerConfiguration.VotingOption
  public var sendRuntimeVariableAnalytics: Swift.Bool
  public mutating func setCustomValue(_ value: Swift.String, for customString: AtomicSwiftUISDK.ContainerConfiguration.CustomString)
  public var filters: [AtomicSDK.AACCardFilter]?
  public var ignoresSafeAreaEdges: SwiftUICore.Edge.Set?
  public enum CardMaxWidthStrategy {
    public enum Alignment {
      case leading
      case center
      case trailing
      public static func == (a: AtomicSwiftUISDK.ContainerConfiguration.CardMaxWidthStrategy.Alignment, b: AtomicSwiftUISDK.ContainerConfiguration.CardMaxWidthStrategy.Alignment) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    case fill
    case fixed(CoreFoundation.CGFloat, alignment: AtomicSwiftUISDK.ContainerConfiguration.CardMaxWidthStrategy.Alignment = .center)
  }
  public var cardMaxWidth: AtomicSwiftUISDK.ContainerConfiguration.CardMaxWidthStrategy
  public enum HorizontalContainerTitleAlignment {
    case center
    case leading
    public static func == (a: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerTitleAlignment, b: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerTitleAlignment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var horizontalTitleAlignment: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerTitleAlignment
  public enum HorizontalContainerEmptyStyle {
    case standard
    case shrink
    public static func == (a: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerEmptyStyle, b: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerEmptyStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var horizontalEmptyStyle: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerEmptyStyle
  public enum HorizontalContainerScrollMode {
    @available(iOS 17.0, *)
    case snap
    case free
    public static func == (a: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerScrollMode, b: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerScrollMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var horizontalScrollMode: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerScrollMode
  public enum HorizontalContainerLastCardAlignment {
    case leading
    case center
    case scaleToFill
    public static func == (a: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerLastCardAlignment, b: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerLastCardAlignment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var horizontalLastCardAlignment: AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerLastCardAlignment
  public enum ModalContainerPosition {
    case top(CoreFoundation.CGFloat)
    case center
    case bottom(CoreFoundation.CGFloat)
  }
  public var modalContainerPosition: AtomicSwiftUISDK.ContainerConfiguration.ModalContainerPosition
}
@available(iOS 16.0, *)
@_Concurrency.MainActor @preconcurrency public struct LazyHorizontalContainer : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(containerId: Swift.String, cardWidth: CoreFoundation.CGFloat, configuration: AtomicSwiftUISDK.ContainerConfiguration = .init())
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s16AtomicSwiftUISDK23LazyHorizontalContainerV4bodyQrvp", 0) __
}
extension SwiftUICore.View {
  @available(iOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency public func modalContainer(containerId: Swift.String, configuration: AtomicSwiftUISDK.ContainerConfiguration = .init()) -> some SwiftUICore.View
  
}
@available(iOS 16.0, *)
@_Concurrency.MainActor @preconcurrency public struct SingleCardContainer : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(containerId: Swift.String, configuration: AtomicSwiftUISDK.ContainerConfiguration = .init())
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s16AtomicSwiftUISDK19SingleCardContainerV4bodyQrvp", 0) __
}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.HorizontalContainer : Swift.Sendable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.LazySingleCardContainer : Swift.Sendable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.StreamContainer : Swift.Sendable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.CustomString : Swift.Equatable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.CustomString : Swift.Hashable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.InterfaceStyle : Swift.Equatable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.InterfaceStyle : Swift.Hashable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.PresentationStyle : Swift.Equatable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.PresentationStyle : Swift.Hashable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.CardMaxWidthStrategy.Alignment : Swift.Equatable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.CardMaxWidthStrategy.Alignment : Swift.Hashable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerTitleAlignment : Swift.Equatable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerTitleAlignment : Swift.Hashable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerEmptyStyle : Swift.Equatable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerEmptyStyle : Swift.Hashable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerScrollMode : Swift.Equatable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerScrollMode : Swift.Hashable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerLastCardAlignment : Swift.Equatable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.ContainerConfiguration.HorizontalContainerLastCardAlignment : Swift.Hashable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.LazyHorizontalContainer : Swift.Sendable {}
@available(iOS 16.0, *)
extension AtomicSwiftUISDK.SingleCardContainer : Swift.Sendable {}
